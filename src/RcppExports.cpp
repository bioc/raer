// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/raer.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cread_tabix
List cread_tabix(std::string tbxpath, std::string region);
RcppExport SEXP _raer_cread_tabix(SEXP tbxpathSEXP, SEXP regionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type tbxpath(tbxpathSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    rcpp_result_gen = Rcpp::wrap(cread_tabix(tbxpath, region));
    return rcpp_result_gen;
END_RCPP
}
// list_tabix_chroms
CharacterVector list_tabix_chroms(std::string tbxpath);
RcppExport SEXP _raer_list_tabix_chroms(SEXP tbxpathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type tbxpath(tbxpathSEXP);
    rcpp_result_gen = Rcpp::wrap(list_tabix_chroms(tbxpath));
    return rcpp_result_gen;
END_RCPP
}
// run_pileup
int run_pileup(std::vector<std::string> bampaths, std::string fapath, std::string region, std::string bedfn, int min_reads, std::vector<int> event_filters, std::vector<int> min_mapQ, std::vector<int> bam_flags, std::vector<int> libtype, std::vector<std::string> outfns, int max_depth, int min_baseQ, int only_keep_variants, std::string reads, SEXP ext);
RcppExport SEXP _raer_run_pileup(SEXP bampathsSEXP, SEXP fapathSEXP, SEXP regionSEXP, SEXP bedfnSEXP, SEXP min_readsSEXP, SEXP event_filtersSEXP, SEXP min_mapQSEXP, SEXP bam_flagsSEXP, SEXP libtypeSEXP, SEXP outfnsSEXP, SEXP max_depthSEXP, SEXP min_baseQSEXP, SEXP only_keep_variantsSEXP, SEXP readsSEXP, SEXP extSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type bampaths(bampathsSEXP);
    Rcpp::traits::input_parameter< std::string >::type fapath(fapathSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type bedfn(bedfnSEXP);
    Rcpp::traits::input_parameter< int >::type min_reads(min_readsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type event_filters(event_filtersSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type min_mapQ(min_mapQSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type bam_flags(bam_flagsSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type libtype(libtypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type outfns(outfnsSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type min_baseQ(min_baseQSEXP);
    Rcpp::traits::input_parameter< int >::type only_keep_variants(only_keep_variantsSEXP);
    Rcpp::traits::input_parameter< std::string >::type reads(readsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ext(extSEXP);
    rcpp_result_gen = Rcpp::wrap(run_pileup(bampaths, fapath, region, bedfn, min_reads, event_filters, min_mapQ, bam_flags, libtype, outfns, max_depth, min_baseQ, only_keep_variants, reads, ext));
    return rcpp_result_gen;
END_RCPP
}
// get_region
List get_region(std::string region);
RcppExport SEXP _raer_get_region(SEXP regionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    rcpp_result_gen = Rcpp::wrap(get_region(region));
    return rcpp_result_gen;
END_RCPP
}
// c_build_index
int c_build_index(std::string bampath, std::string idxpath);
RcppExport SEXP _raer_c_build_index(SEXP bampathSEXP, SEXP idxpathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type bampath(bampathSEXP);
    Rcpp::traits::input_parameter< std::string >::type idxpath(idxpathSEXP);
    rcpp_result_gen = Rcpp::wrap(c_build_index(bampath, idxpath));
    return rcpp_result_gen;
END_RCPP
}
// fetch_cb_reads
int fetch_cb_reads(std::string bampath, std::string outpath, std::vector<std::string> cbs);
RcppExport SEXP _raer_fetch_cb_reads(SEXP bampathSEXP, SEXP outpathSEXP, SEXP cbsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type bampath(bampathSEXP);
    Rcpp::traits::input_parameter< std::string >::type outpath(outpathSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type cbs(cbsSEXP);
    rcpp_result_gen = Rcpp::wrap(fetch_cb_reads(bampath, outpath, cbs));
    return rcpp_result_gen;
END_RCPP
}

// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rino.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// read_bam_tags
DataFrame read_bam_tags(std::string bampath, std::vector<std::string> tag_ids, std::vector<std::string> tag_types, std::string region);
RcppExport SEXP _rino_read_bam_tags(SEXP bampathSEXP, SEXP tag_idsSEXP, SEXP tag_typesSEXP, SEXP regionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type bampath(bampathSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tag_ids(tag_idsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tag_types(tag_typesSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    rcpp_result_gen = Rcpp::wrap(read_bam_tags(bampath, tag_ids, tag_types, region));
    return rcpp_result_gen;
END_RCPP
}
// read_bam
DataFrame read_bam(std::string bampath, std::string region, std::vector<std::string> tag_ids, std::vector<std::string> tag_types);
RcppExport SEXP _rino_read_bam(SEXP bampathSEXP, SEXP regionSEXP, SEXP tag_idsSEXP, SEXP tag_typesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type bampath(bampathSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tag_ids(tag_idsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tag_types(tag_typesSEXP);
    rcpp_result_gen = Rcpp::wrap(read_bam(bampath, region, tag_ids, tag_types));
    return rcpp_result_gen;
END_RCPP
}
// run_pileup
int run_pileup(std::string bampath, std::string fapath, std::string region, std::string outfn, std::string bedfn);
RcppExport SEXP _rino_run_pileup(SEXP bampathSEXP, SEXP fapathSEXP, SEXP regionSEXP, SEXP outfnSEXP, SEXP bedfnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type bampath(bampathSEXP);
    Rcpp::traits::input_parameter< std::string >::type fapath(fapathSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfn(outfnSEXP);
    Rcpp::traits::input_parameter< std::string >::type bedfn(bedfnSEXP);
    rcpp_result_gen = Rcpp::wrap(run_pileup(bampath, fapath, region, outfn, bedfn));
    return rcpp_result_gen;
END_RCPP
}
// get_region
List get_region(std::string region);
RcppExport SEXP _rino_get_region(SEXP regionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    rcpp_result_gen = Rcpp::wrap(get_region(region));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rino_read_bam_tags", (DL_FUNC) &_rino_read_bam_tags, 4},
    {"_rino_read_bam", (DL_FUNC) &_rino_read_bam, 4},
    {"_rino_run_pileup", (DL_FUNC) &_rino_run_pileup, 5},
    {"_rino_get_region", (DL_FUNC) &_rino_get_region, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rino(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

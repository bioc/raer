// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/raer.h"
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// read_bam_tags
DataFrame read_bam_tags(std::string bampath, std::vector<std::string> tag_ids, std::vector<std::string> tag_types, std::string region);
RcppExport SEXP _raer_read_bam_tags(SEXP bampathSEXP, SEXP tag_idsSEXP, SEXP tag_typesSEXP, SEXP regionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type bampath(bampathSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tag_ids(tag_idsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tag_types(tag_typesSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    rcpp_result_gen = Rcpp::wrap(read_bam_tags(bampath, tag_ids, tag_types, region));
    return rcpp_result_gen;
END_RCPP
}
// read_bam
DataFrame read_bam(std::string bampath, std::vector<std::string> tag_ids, std::vector<std::string> tag_types, std::string region);
RcppExport SEXP _raer_read_bam(SEXP bampathSEXP, SEXP tag_idsSEXP, SEXP tag_typesSEXP, SEXP regionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type bampath(bampathSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tag_ids(tag_idsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type tag_types(tag_typesSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    rcpp_result_gen = Rcpp::wrap(read_bam(bampath, tag_ids, tag_types, region));
    return rcpp_result_gen;
END_RCPP
}
// run_pileup
int run_pileup(std::vector<std::string> bampaths, std::string fapath, std::string region, std::string outfn, std::string bedfn, std::vector<int> min_reads, int max_depth, int min_baseQ, std::string libtype, SEXP ext);
RcppExport SEXP _raer_run_pileup(SEXP bampathsSEXP, SEXP fapathSEXP, SEXP regionSEXP, SEXP outfnSEXP, SEXP bedfnSEXP, SEXP min_readsSEXP, SEXP max_depthSEXP, SEXP min_baseQSEXP, SEXP libtypeSEXP, SEXP extSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type bampaths(bampathsSEXP);
    Rcpp::traits::input_parameter< std::string >::type fapath(fapathSEXP);
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    Rcpp::traits::input_parameter< std::string >::type outfn(outfnSEXP);
    Rcpp::traits::input_parameter< std::string >::type bedfn(bedfnSEXP);
    Rcpp::traits::input_parameter< std::vector<int> >::type min_reads(min_readsSEXP);
    Rcpp::traits::input_parameter< int >::type max_depth(max_depthSEXP);
    Rcpp::traits::input_parameter< int >::type min_baseQ(min_baseQSEXP);
    Rcpp::traits::input_parameter< std::string >::type libtype(libtypeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ext(extSEXP);
    rcpp_result_gen = Rcpp::wrap(run_pileup(bampaths, fapath, region, outfn, bedfn, min_reads, max_depth, min_baseQ, libtype, ext));
    return rcpp_result_gen;
END_RCPP
}
// get_region
List get_region(std::string region);
RcppExport SEXP _raer_get_region(SEXP regionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type region(regionSEXP);
    rcpp_result_gen = Rcpp::wrap(get_region(region));
    return rcpp_result_gen;
END_RCPP
}
// c_build_index
int c_build_index(std::string bampath, std::string idxpath);
RcppExport SEXP _raer_c_build_index(SEXP bampathSEXP, SEXP idxpathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type bampath(bampathSEXP);
    Rcpp::traits::input_parameter< std::string >::type idxpath(idxpathSEXP);
    rcpp_result_gen = Rcpp::wrap(c_build_index(bampath, idxpath));
    return rcpp_result_gen;
END_RCPP
}
// fetch_cb_reads
int fetch_cb_reads(std::string bampath, std::string outpath, std::vector<std::string> cbs);
RcppExport SEXP _raer_fetch_cb_reads(SEXP bampathSEXP, SEXP outpathSEXP, SEXP cbsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< std::string >::type bampath(bampathSEXP);
    Rcpp::traits::input_parameter< std::string >::type outpath(outpathSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string> >::type cbs(cbsSEXP);
    rcpp_result_gen = Rcpp::wrap(fetch_cb_reads(bampath, outpath, cbs));
    return rcpp_result_gen;
END_RCPP
}

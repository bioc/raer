% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pileup.R
\name{get_pileup}
\alias{get_pileup}
\title{Generate base counts using pileup}
\usage{
get_pileup(
  bamfiles,
  fafile,
  bedfile = NULL,
  region = NULL,
  chroms = NULL,
  min_reads = 1L,
  min_base_qual = 20L,
  min_mapq = c(0L),
  max_depth = 10000,
  library_type = "fr-first-strand",
  outfile_prefix = NULL,
  bedidx = NULL,
  bam_flags = NULL,
  event_filters = c(0, 0, 0, 0, 0, 0, 0),
  only_keep_variants = FALSE,
  reads = NULL,
  return_data = TRUE,
  BPPARAM = SerialParam(),
  verbose = FALSE
)
}
\arguments{
\item{bamfiles}{paths to 1 or more bam files}

\item{fafile}{path to fasta file}

\item{bedfile}{path to bed file with sites or regions to query}

\item{region}{samtools region query string (i.e. chr1:100-1000)}

\item{chroms}{chromosomes to process, not to be used with region}

\item{min_reads}{min read depth needed to report site}

\item{min_base_qual}{min base quality score to consider read for pileup}

\item{min_mapq}{minimum required MAPQ score}

\item{max_depth}{maximum read depth considered at each site}

\item{library_type}{read orientation, one of fr-first-strand,
fr-second-strand, or unstranded. Can supply as a vector to specify for each
input bam.}

\item{outfile_prefix}{output prefix for tabix indexed files}

\item{bedidx}{A BedFile object, if supplied, pileup will use index
generated by \code{\link[=indexBed]{indexBed()}}}

\item{bam_flags}{bam flags to filter or keep, use \code{\link[Rsamtools:ScanBamParam-class]{Rsamtools::scanBamFlag()}}
to set}

\item{event_filters}{integer vector of length 4 with values indicating
distance from pileup position to features to filter. Distance to trim from
5' ends of reads, from 3' end of reads, distance from splicing events, distance from indels, and
length of homopolymer stretch used to determine if a site is in a homopolymer.
The number of read mismatch types (e.g. A->G or G->T) allowed in a single read,
and the required # of any mismatches that activate the mismatch type filter.
default is no filters applied (e.g. c(0,0,0,0,0,0,0)).}

\item{only_keep_variants}{if TRUE, then only variant sites will be reported
(FALSE by default)}

\item{reads}{if supplied a fasta file will be written with reads that pass filters
and contain variants}

\item{return_data}{return data as a Granges table?}

\item{BPPARAM}{A \link{BiocParallel} class to control parallel execution. Parallel
processing occurs per chromosome, so is disabled when run on a single region.}

\item{verbose}{if TRUE, then report progress.}
}
\value{
A list containing a \code{GRanges} object for each input bam file, or a vector
of the output tabixed file names if \code{return_data} is FALSE.
}
\description{
Generate base counts using pileup
}
\details{
Multiple bam files can be processed together, with files being
written for each bam file. In this mode the output regions will be consistent across all files.
The min_mapq and library_type parameters can be specified for each input files.
}
\examples{
bamfn <- system.file("extdata", "SRR5564269_Aligned.sortedByCoord.out.md.bam", package = "raer")
bam2fn <- system.file("extdata", "SRR5564277_Aligned.sortedByCoord.out.md.bam", package = "raer")
fafn <- system.file("extdata", "human.fasta", package = "raer")

plp <- get_pileup(bamfn, fafn)
plps <- get_pileup(c(bamfn, bam2fn), fafn)

}
